{"componentChunkName":"component---node-modules-gatsby-theme-ocular-src-react-templates-search-jsx","path":"/search","result":{"pageContext":{"data":[{"excerpt":"Introduction @goongmaps/goong-map-react  is a suite of  React  components for\n Goong GL JS . For basemaps: You can load map data from Goong's own service. You can create and host your own map data using one of the many  open source tools . New to  @goongmaps/goong-map-react ?  Get Started Want to contribute? See our  Developer Guide Design Philosophy At Uber, we make powerful web tools that contain maps. To manage the complexity of our applications, we fully embrace React and reactive programming. The stock  goong-js  APIs are  imperative . That is, you instruct the map to do something (for example,  map.flyTo ), and it will execute the command at its own pace. This does not scale when we have many components that need to synchronize with each other. One use case we have is to render two maps side by side, and when the user interacts with one, update both cameras. We draw UI on top of the map using React, pinned to a given geolocation. We also render visualization layers on top of the map using WebGL, most notably with  deck.gl . The goong-js maps, the deck.gl canvas, and React controls' render cycles are all asynchronous. If we listen to the  move  event in the map and tell the other components to update, the other components would always be one frame behind. Ultimately, in the spirit of the  reactive programming paradigm , data always flows  down . In a complex application, any user input or data fetch can affect the rendering of many components. We might store the  source of truth  in a parent component state, or Redux store, or hooks, and let it propagate down to the map as well as its peers. As long as the map manages its own state, as goong-js is designed to do, we risk the components going out of sync. @goongmaps/goong-map-react  creates a fully reactive wrapper for  goong-js . The  InteractiveMap  component is stateless. To move the map camera in anyway, the application must update the component's props. The application can also be confident that the map's camera would never deviate from the props that it's assigned. At first glance, its API may seem verbose to those who come from the imperative world of goong-js. However, it is essential for the correctness of large applications. Limitations This library provides convenient wrappers around initializing and (to some degree) tracking the state of a Goong WebGL map. Because most of the functionality of Goong's JS API depends on the use of HTML5 canvases and WebGL, which React is not built to manipulate, the React component does not mirror all the functionality of Goong GL JS's Map class. You may access the native Goong API exposed by the  getMap()  function in this library. However, proceed with caution as calling the native APIs may break the connection between the React layer props and the underlying map state. Examples of replacing common native API calls with their React equivalents can be found on the  FAQ  page.","headings":[{"value":"Introduction","depth":1},{"value":"Design Philosophy","depth":2},{"value":"Limitations","depth":2}],"slug":"docs","title":"Introduction"},{"excerpt":"Custom Components You may create your own map control components by consuming  MapContext . Using the MapContext The following component renders a label \"(longitude, latitude)\" at the given coordinate: Using the useMapControl hook useMapControl  is an experimental API that makes it easier to create controls with event handling. Calling  useMapControl(opts)  returns an object containing the following fields: context  (MapContext) - the current context value containerRef  (RefObject) - this should be assigned to the  ref  prop of the DOM element that the event listeners should attach to. This hook supports the following options: onScroll  (Function) - called on mouse wheel event. Can be used to stop map from zooming when this component is scrolled. onDragStart  (Function) - called on dragstart event. Can be used to stop map from panning when this component is dragged. onClick  (Function) - called on click event. Can be used to stop map from calling the  onClick  callback when this component is clicked. onDoubleClick  (Function) - called on double click event. Can be used to stop map from zooming when this component is double clicked. onPointerMove  (Function) - called on pointermove event. Can be used to stop map from calling the  onMouseMove  or  onTouchMove  callback when this component is hovered.","headings":[{"value":"Custom Components","depth":1},{"value":"Using the MapContext","depth":2},{"value":"Using the useMapControl hook","depth":2}],"slug":"docs/advanced/custom-components","title":"Custom Components"},{"excerpt":"Custom Map Controller Overriding The Default Map Controller To change the default behavior of map interaction, you can provide a custom map control to the  controller  prop of  InteractiveMap . This custom map control must offer the following interface: setOptions(options)  - called by  InteractiveMap  when props change. Documentation of  the MapController class . Examples A simple example to swap drag pan and drag rotate: Overwrite existing event handling: Listen to additional events: Add a custom callback:","headings":[{"value":"Custom Map Controller","depth":1},{"value":"Overriding The Default Map Controller","depth":2},{"value":"Examples","depth":2}],"slug":"docs/advanced/custom-map-controller","title":"Custom Map Controller"},{"excerpt":"Viewport Transition @goongmaps/goong-map-react  does not expose the transition API from  goong-js  since it is designed to be a stateless component, and needs to synchronize with separate overlay systems such as deck.gl. Instead, transitions can be defined using  InteractiveMap 's transition props. Example: Fly to a New Location See  viewport animation  for a complete example. Example: Transition Viewport To A Bounding Box You can use the  WebMercatorViewport  utility to find the target viewport that fits around a lngLat bounding box: Documentation of WebMercatorViewport Controlling Map Transitions InteractiveMap's Transition Props See properties of  InteractiveMap . transitionDuration  (Number) transitionInterpolator  (Object) transitionEasing  (Function) transitionInterruption  (Number) onTransitionStart  (Function) onTransitionInterrupt  (Function) onTransitionEnd  (Function) Transition and the onViewportChange Callback InteractiveMap  is designed to be a stateless component. For transitions to work, the application must update the viewport props returned by the  onViewportChange  callback: Remarks: The props returned by the callback may contain transition properties. For example, during panning and rotating, the callback is invoked with  transitionDuration: 0 , meaning that the map movement instantly matches the change of the pointer. When panning or zooming with keyboard, the callback is invoked with a 300ms linear transition. It is recommended that when programatically triggering a transition, always explicitly set the transition properties (interpolator, easing and duration). \"Set and forget\": the values of the following props at the start of a transition carry through the entire duration of the transition: transitionDuration transitionInterpolator transitionEasing transitionInterruption The default interaction/transition behavior can always be intercepted and overwritten in the handler for  onViewportChange . However, if a transition is in progress, the properties that are being transitioned (e.g. longitude and latitude) should not be manipulated, otherwise the change will be interpreted as an interruption of the transition. When using  FlyToInterpolator  for  transitionInterpolator ,  transitionDuration  can be set to  'auto'  where actual duration is auto calculated based on start and end viewports and is linear to the distance between them. This duration can be further customized using  speed  parameter to  FlyToInterpolator  constructor. Transition Interpolators A  TransitionInterpolator  instance must be supplied to the  transitionInterpolator  prop. It contains the following methods: arePropsEqual(currentProps, nextProps)  - called to determine if transition should be triggered when viewport props update. initiateProps(startProps, endProps)  - called before transition starts to pre-process the start and end viewport props. interpolateProps(startProps, endProps, t)  - called to get viewport props in transition.  t  is a time factor between  [0, 1] . @goongmaps/goong-map-react  offers two built-in interpolator classes: LinearInterpolator FlyToInterpolator","headings":[{"value":"Viewport Transition","depth":1},{"value":"Example: Fly to a New Location","depth":2},{"value":"Example: Transition Viewport To A Bounding Box","depth":2},{"value":"Controlling Map Transitions","depth":2},{"value":"InteractiveMap's Transition Props","depth":3},{"value":"Transition and the onViewportChange Callback","depth":3},{"value":"Transition Interpolators","depth":3}],"slug":"docs/advanced/viewport-transition","title":"Viewport Transition"},{"excerpt":"AttributionControl This is a React equivalent of Goong's  AttributionControl . Properties toggleLabel  (String) default:  'Toggle Attribution' Label applied to the toggle button. compact  (Boolean) If  true , force a compact attribution that shows the full attribution on mouse hover. If  false , force the full attribution control. When undefined, shows a responsive attribution that collapses when the map is less than 640 pixels wide. customAttribution  (String| String ) String or strings to show in addition to any other attributions. className  (String) Assign a custom class name to the container of this control. style  (Object) default:  {position: 'absolute'} A  React style  object applied to this control. captureScroll  (Boolean) default:  false Stop propagation of mouse wheel event to the map component. Can be used to stop map from zooming when this component is scrolled. captureDrag  (Boolean) default:  true Stop propagation of dragstart event to the map component. Can be used to stop map from panning when this component is dragged. captureClick  (Boolean) default:  true Stop propagation of click event to the map component. Can be used to stop map from calling the  onClick  callback when this component is clicked. captureDoubleClick  (Boolean) default:  true Stop propagation of dblclick event to the map component. Can be used to stop map from zooming when this component is double clicked. capturePointerMove  (Boolean) default:  false Stop propagation of pointermove event to the map component. Can be used to stop map from calling the  onMouseMove  or  onTouchMove  callback when this component is hovered. Styling Like its Goong counterpart, this control relies on the goong-js stylesheet to work properly. Make sure to add the stylesheet to your page. Source attribution-control.js","headings":[{"value":"AttributionControl","depth":1},{"value":"Properties","depth":2},{"value":"toggleLabel (String)","depth":5},{"value":"compact (Boolean)","depth":5},{"value":"customAttribution (String|String)","depth":5},{"value":"className (String)","depth":5},{"value":"style (Object)","depth":5},{"value":"captureScroll (Boolean)","depth":5},{"value":"captureDrag (Boolean)","depth":5},{"value":"captureClick (Boolean)","depth":5},{"value":"captureDoubleClick (Boolean)","depth":5},{"value":"capturePointerMove (Boolean)","depth":5},{"value":"Styling","depth":2},{"value":"Source","depth":2}],"slug":"docs/api-reference/attribution-control","title":"AttributionControl"},{"excerpt":"CanvasOverlay Allows applications to overlay data on top of maps using a canvas. Properties redraw  (Function) Called every time the map updates. Parameters: ctx  {CanvasRenderingContext2D} - rendering context of the canvas width  {Number} - width of the viewport height  {Number} - height of the viewport project  {Function} - get screen position  [x, y]  from geo coordinates  [lng, lat] unproject  {Function} - get geo coordinates  [lng, lat]  from screen position  [x, y] captureScroll  (Boolean) default:  false Stop propagation of mouse wheel event to the map component. Can be used to stop map from zooming when this component is scrolled. captureDrag  (Boolean) default:  false Stop propagation of dragstart event to the map component. Can be used to stop map from panning when this component is dragged. captureClick  (Boolean) default:  false Stop propagation of click event to the map component. Can be used to stop map from calling the  onClick  callback when this component is clicked. captureDoubleClick  (Boolean) default:  false Stop propagation of dblclick event to the map component. Can be used to stop map from zooming when this component is double clicked. capturePointerMove  (Boolean) default:  false Stop propagation of pointermove event to the map component. Can be used to stop map from calling the  onMouseMove  or  onTouchMove  callback when this component is hovered. Source canvas-overlay.js","headings":[{"value":"CanvasOverlay","depth":1},{"value":"Properties","depth":2},{"value":"redraw (Function)","depth":5},{"value":"captureScroll (Boolean)","depth":5},{"value":"captureDrag (Boolean)","depth":5},{"value":"captureClick (Boolean)","depth":5},{"value":"captureDoubleClick (Boolean)","depth":5},{"value":"capturePointerMove (Boolean)","depth":5},{"value":"Source","depth":2}],"slug":"docs/api-reference/canvas-overlay","title":"CanvasOverlay"},{"excerpt":"FlyToInterpolator Implements the  TransitionInterpolator  interface. Designed to use with the  transitionInterpolator  prop of  InteractiveMap . This interpolator offers similar behavior to Goong's  flyTo  method. Constructor new FlyToInterpolator([options]) Parameters: options  {Object} (optional) curve  (Number, optional, default: 1.414) - The zooming \"curve\" that will occur along the flight path. speed  (Number, optional, default: 1.2) - The average speed of the animation defined in relation to  options.curve , it linearly affects the duration, higher speed returns smaller durations and vice versa. screenSpeed  (Number, optional) - The average speed of the animation measured in screenfuls per second. Similar to  opts.speed  it linearly affects the duration,  when specified  opts.speed  is ignored. maxDuration  (Number, optional) - Maximum duration in milliseconds, if calculated duration exceeds this value,  0  is returned. Source viewport-fly-to-interpolator.js","headings":[{"value":"FlyToInterpolator","depth":1},{"value":"Constructor","depth":2},{"value":"Source","depth":2}],"slug":"docs/api-reference/fly-to-interpolator","title":"FlyToInterpolator"},{"excerpt":"FullscreenControl This is a React equivalent of Goong's  FullscreenControl . Properties container  (HTMLElement) container  is the compatible DOM element which should be made full screen. By default, the map container element will be made full screen. label  (String) default:  Toggle fullscreen Label applied to the fullscreen control button. className  (String) Assign a custom class name to the container of this control. style  (Object) default:  {position: 'absolute'} A  React style  object applied to this control. captureScroll  (Boolean) default:  false Stop propagation of mouse wheel event to the map component. Can be used to stop map from zooming when this component is scrolled. captureDrag  (Boolean) default:  true Stop propagation of dragstart event to the map component. Can be used to stop map from panning when this component is dragged. captureClick  (Boolean) default:  true Stop propagation of click event to the map component. Can be used to stop map from calling the  onClick  callback when this component is clicked. captureDoubleClick  (Boolean) default:  true Stop propagation of dblclick event to the map component. Can be used to stop map from zooming when this component is double clicked. capturePointerMove  (Boolean) default:  false Stop propagation of pointermove event to the map component. Can be used to stop map from calling the  onMouseMove  or  onTouchMove  callback when this component is hovered. Styling Like its Goong counterpart, this control relies on the goong-js stylesheet to work properly. Make sure to add the stylesheet to your page. Source fullscreen-control.js","headings":[{"value":"FullscreenControl","depth":1},{"value":"Properties","depth":2},{"value":"container (HTMLElement)","depth":5},{"value":"label (String)","depth":5},{"value":"className (String)","depth":5},{"value":"style (Object)","depth":5},{"value":"captureScroll (Boolean)","depth":5},{"value":"captureDrag (Boolean)","depth":5},{"value":"captureClick (Boolean)","depth":5},{"value":"captureDoubleClick (Boolean)","depth":5},{"value":"capturePointerMove (Boolean)","depth":5},{"value":"Styling","depth":2},{"value":"Source","depth":2}],"slug":"docs/api-reference/fullscreen-control","title":"FullscreenControl"},{"excerpt":"GeolocateControl This is a React equivalent of Goong's  GeolocateControl . Properties Accepts all the options of  Goong GeolocateControl . onViewportChange  (Function, optional) Callback when the user interaction with this control requests a viewport update. If provided, will be called instead of the containing  InteractiveMap 's  onViewportChange . onGeolocate  (Function, optional) Callback when Geolocation API position updates. It is called with a Geolocation API  PositionOptions  object. positionOptions  (Object) default:  {enableHighAccuracy: false, timeout: 6000} A Geolocation API  PositionOptions  object. fitBoundsOptions  (Object) default:  {maxZoom: 15} A  fitBounds  options object to use when the map is panned and zoomed to the user's location. The default is to use a  maxZoom of 15 to limit how far the map will zoom in for very accurate locations. trackUserLocation  (Boolean) default:  false If true the Geolocate Control becomes a toggle button and when active the map will receive updates to the user's location as it changes. showUserLocation  (Boolean) default:  true By default a dot will be shown on the map at the user's location. Set to false to disable. showAccuracyCircle  (Boolean) default:  true By default, if showUserLocation is  true  , a transparent circle will be drawn around the user location indicating the accuracy (95% confidence level) of the user's location. Set to  false  to disable. Always disabled when showUserLocation is  false . className  (String) Assign a custom class name to the container of this control. style  (Object) default:  {position: 'absolute'} A  React style  object applied to this control. label  (String) default:  'Find My Location' Label applied to the Geolocate control button. disabledLabel  (String) default:  'Location Not Available' Label applied to the Geolocate control button if geolocation is disabled by the user. auto  (Boolean) default:  false Programmatically triggers geolocate when set to true. Initializing the component with true triggers inside  componentDidMount  where as changing to true at a later point triggers inside  componentDidUpdate . Initally setting as or changing to false has no effect. captureScroll  (Boolean) default:  false Stop propagation of mouse wheel event to the map component. Can be used to stop map from zooming when this component is scrolled. captureDrag  (Boolean) default:  true Stop propagation of dragstart event to the map component. Can be used to stop map from panning when this component is dragged. captureClick  (Boolean) default:  true Stop propagation of click event to the map component. Can be used to stop map from calling the  onClick  callback when this component is clicked. captureDoubleClick  (Boolean) default:  true Stop propagation of dblclick event to the map component. Can be used to stop map from zooming when this component is double clicked. capturePointerMove  (Boolean) default:  false Stop propagation of pointermove event to the map component. Can be used to stop map from calling the  onMouseMove  or  onTouchMove  callback when this component is hovered. Styling Like its Goong counterpart, this control relies on the goong-js stylesheet to work properly. Make sure to add the stylesheet to your page. Source geolocate-control.js","headings":[{"value":"GeolocateControl","depth":1},{"value":"Properties","depth":2},{"value":"onViewportChange (Function, optional)","depth":5},{"value":"onGeolocate (Function, optional)","depth":5},{"value":"positionOptions (Object)","depth":5},{"value":"fitBoundsOptions (Object)","depth":5},{"value":"trackUserLocation (Boolean)","depth":5},{"value":"showUserLocation (Boolean)","depth":5},{"value":"showAccuracyCircle (Boolean)","depth":5},{"value":"className (String)","depth":5},{"value":"style (Object)","depth":5},{"value":"label (String)","depth":5},{"value":"disabledLabel (String)","depth":5},{"value":"auto (Boolean)","depth":5},{"value":"captureScroll (Boolean)","depth":5},{"value":"captureDrag (Boolean)","depth":5},{"value":"captureClick (Boolean)","depth":5},{"value":"captureDoubleClick (Boolean)","depth":5},{"value":"capturePointerMove (Boolean)","depth":5},{"value":"Styling","depth":2},{"value":"Source","depth":2}],"slug":"docs/api-reference/geolocate-control","title":"GeolocateControl"},{"excerpt":"HTMLOverlay Allows applications to overlay data on top of maps using a HTML container. Properties redraw  (Function) Called every time the map updates. Parameters: width  {Number} - width of the viewport height  {Number} - height of the viewport project  {Function} - get screen position  [x, y]  from geo coordinates  [lng, lat] unproject  {Function} - get geo coordinates  [lng, lat]  from screen position  [x, y] style  (Object) Additional css styles of the  div  container. captureScroll  (Boolean) default:  false Stop propagation of mouse wheel event to the map component. Can be used to stop map from zooming when this component is scrolled. captureDrag  (Boolean) default:  false Stop propagation of dragstart event to the map component. Can be used to stop map from panning when this component is dragged. captureClick  (Boolean) default:  false Stop propagation of click event to the map component. Can be used to stop map from calling the  onClick  callback when this component is clicked. captureDoubleClick  (Boolean) default:  false Stop propagation of dblclick event to the map component. Can be used to stop map from zooming when this component is double clicked. capturePointerMove  (Boolean) default:  false Stop propagation of pointermove event to the map component. Can be used to stop map from calling the  onMouseMove  or  onTouchMove  callback when this component is hovered. Source html-overlay.js","headings":[{"value":"HTMLOverlay","depth":1},{"value":"Properties","depth":2},{"value":"redraw (Function)","depth":5},{"value":"style (Object)","depth":5},{"value":"captureScroll (Boolean)","depth":5},{"value":"captureDrag (Boolean)","depth":5},{"value":"captureClick (Boolean)","depth":5},{"value":"captureDoubleClick (Boolean)","depth":5},{"value":"capturePointerMove (Boolean)","depth":5},{"value":"Source","depth":2}],"slug":"docs/api-reference/html-overlay","title":"HTMLOverlay"},{"excerpt":"InteractiveMap This component renders  Goong JS  and provides full interactivity support.\nIt uses  StaticMap  underneath to render the final map component.\nThis is the  default  exported component from  goong-map-react . Properties Initialization Inherit the following props from  StaticMap : attributionControl  (Boolean) disableTokenWarning  (Boolean) gl  (WebGLContext) goongApiAccessToken  (String) goongApiUrl  (String) mapOptions  (Object) preserveDrawingBuffer  (Boolean) preventStyleDiffing  (Boolean) reuseMaps  (Boolean) transformRequest  (Function) Map State Inherit the following props from  StaticMap : mapStyle  (String | Object | Immutable.Map) width  (Number | String) height  (Number | String) latitude  (Number) longitude  (Number) zoom  (Number) bearing  (Number) pitch  (Number) altitude  (Number) viewState  (Object) Render Options Inherit the following props from  StaticMap : style  (Object) visible  (Boolean) visibilityConstraints  (Object) getCursor  (Function) Accessor that returns a cursor style to show interactive state. Called when the component is being rendered. Parameters state  - The current state of the component. state.isDragging  - If the map is being dragged. state.isHovering  - If the pointer is over an interactive feature. See  interactiveLayerIds  prop. The default implementation of  getCursor  returns  'pointer'  if  isHovering ,  'grabbing'  if  isDragging  and  'grab'  otherwise. Interaction Options maxZoom  (Number) default:  20 Max zoom level. minZoom  (Number) default:  0 Min zoom level. maxPitch  (Number) default:  85 Max pitch in degrees. minPitch  (Number) default:  0 Min pitch in degrees. scrollZoom  (Boolean|Object) default:  true Enable scroll to zoom. If an object is provided, may contain the following options to customize the scroll zoom behavior: speed  (Number) - Multiplier for the wheel delta. Default  0.01 . smooth  (Boolean) - Smoothly transition to the new zoom. If enabled, will provide a slightly lagged but smoother experience. Default  false . dragPan  (Boolean|Object) default:  true Enable drag to pan. If an object is provided, may contain the following options to customize its behavior: inertia  (Number) - Enable momentum/inertia when the gesture ends. The value specifies after how long the panning comes to a stop, in milliseconds. Default  300 . dragRotate  (Boolean) default:  true Enable drag to rotate. If an object is provided, may contain the following options to customize its behavior: inertia  (Number) - Enable momentum/inertia when the gesture ends. The value specifies after how long the rotation comes to a stop, in milliseconds. Default  300 . doubleClickZoom  (Boolean) default:  true Enable double click to zoom. touchZoom  (Boolean|Object) default:  true Enable multitouch zoom. If an object is provided, may contain the following options to customize its behavior: inertia  (Number) - Enable momentum/inertia when the gesture ends. The value specifies after how long the zooming comes to a stop, in milliseconds. Default  300 . touchRotate  (Boolean|Object) default:  false Enable multitouch rotate, including two-finger rotation to change bearing and three-finger swipe to change pitch. If an object is provided, may contain the following options to customize its behavior: inertia  (Number) - Enable momentum/inertia when the gesture ends. The value specifies after how long the rotation comes to a stop, in milliseconds. Default  300 . keyboard  (Boolean|Object) default:  true Enable keyboard navigation. If an object is provided, may contain the following options to customize its behavior: zoomSpeed  (Number) - speed of zoom using +/- keys. Default  2 . moveSpeed  (Number) - speed of movement using arrow keys, in pixels. rotateSpeedX  (Number) - speed of rotation using shift + left/right arrow keys, in degrees. Default  15 . rotateSpeedY  (Number) - speed of rotation using shift + up/down arrow keys, in degrees. Default  10 . touchAction  (String) default:  'none' Allow browser default touch actions. Default  none . See  hammer.js doc . By default, the map captures all touch interactions. This prop is useful for mobile applications to unblock default scrolling behavior. For example, use the combination  dragPan: false  and  touchAction: 'pan-y'  to allow vertical page scroll when dragging over the map. eventRecognizerOptions  (Object) default:  {} Set options for gesture recognition. My contain the following fields: pan  - an object that is  Hammer.Pan  options. This gesture is used for drag events. pinch  - an object that is  Hammer.Pinch  options This gesture is used for two-finger touch events. tripan  - an object that is  Hammer.Pan  options.  This gesture is used for three-finger touch events. tap  - an object that is  Hammer.Tap  options. This gesture is used for the  onClick  callback. anytap  - an object that is  Hammer.Tap  options. This gesture is used for the  onNativeClick  callback. doubletap  - an object that is  Hammer.Tap  options. This gesture is used for double click events. For example, the following setting makes panning less sensitive and clicking easier on mobile: Note that the value of this prop is used once when the component mounts. Subsequent changes will be ignored. clickRadius  (Number) default:  0 Radius to detect features around a clicked point. controller  (Object) A map controller instance to replace the default map controller. This object must implement the following interface: events  - An array of subscribed events handleEvent(event, context)  - A method that handles interactive events interactiveLayerIds  (Array) default:  null A list of layer ids that are interactive. If specified: Pointer event callbacks will only query the features under the pointer of these layers. The  getCursor  callback will receive  isHovering: true  when hover over features of these layers. If not specified: Pointer event callbacks will query the features under the pointer of all layers. The  getCursor  callback will always receive  isHovering: false . Transitions transitionDuration  (Number) default:  0 Duration of transition in milliseconds. If specified, the map's viewport will smoothly move from the previous props to the current one. transitionInterpolator  (Object) default:  new LinearInterpolator() An interpolator object that defines the transition behavior between two map states.  goong-map-react  offers two interpolators: LinearInterpolator  - similar to Goong's  easeTo  behavior. FlyToInterpolator  - similar to Goong's  flyTo  behavior. You may import them as follows: For details about using transition interpolators, see  transitions . transitionEasing  (Function) default:  t => t Easing function that maps a value from  [0, 1]  to  [0, 1] . Check out  http://easings.net/  for common easing curves. transitionInterruption  (Number) default:  TRANSITION_EVENTS.BREAK What to do if an ongoing transition is interrupted by another transition. There are 4 options: TRANSITION_EVENTS.BREAK  - Start new transition from the current view. TRANSITION_EVENTS.SNAP_TO_END  - Jump to the end of the previous transition before starting the new transition. TRANSITION_EVENTS.IGNORE  - Complete the previous transition and ignore the new viewport change. TRANSITION_EVENTS.UPDATE  - Continue the ongoing transition but change its destination to the new viewport. You may import the constants as follows: Callbacks Inherit the following props from  StaticMap : onLoad  (Function) onResize  (Function) onError  (Function) onViewportChange  (Function) Callback that is fired when the map's viewport properties should be updated. If not supplied, the map is not interactive. Arguments: viewState  (Object) The next viewport properties, including:  width ,  height ,  latitude ,  longitude ,  zoom ,  bearing ,  pitch ,  altitude ,  maxZoom ,  minZoom ,  maxPitch ,  minPitch ,  transitionDuration ,  transitionEasing ,  transitionInterpolator ,  transitionInterruption . interactionState  (Object) The current interaction that caused this viewport change. See  onInteractionStateChange  for possible fields. oldViewState  (Object) The current viewport properties. onViewStateChange  (Function) A newer version of the  onViewportChange  callback. Both are supported and provide equivalent functionality. onInteractionStateChange  (Function) Callback that is fired when the user interacted with the map. Possible fields include: interactionState.inTransition  (Boolean) interactionState.isDragging  (Boolean) interactionState.isPanning  (Boolean) interactionState.isRotating  (Boolean) interactionState.isZooming  (Boolean) Note: onInteractionStateChange  may be fired without  onViewportChange . For example, when the pointer is released at the end of a drag-pan,  isDragging  are reset to  false , without the viewport's  longitude  and  latitude  changing. onHover  (Function) Called when the mouse moves over the map (without button pressed). Receives a  PointerEvent  object. onClick  (Function) Called when the map is single clicked. Receives a  PointerEvent  object. This event is not fired on double click therefore there may be a delay between pointer up and the event. onNativeClick  (Function) Called when the map is clicked. Receives a  PointerEvent  object. This event is fired twice on double click. onDblClick  (Function) Called when the map is double clicked. Receives a  PointerEvent  object. onMouseDown  (Function) Called when a pointing device (usually a mouse) is pressed within the map. Receives a  PointerEvent  object. onMouseMove  (Function) Called when a pointing device (usually a mouse) is moved within the map. Receives a  PointerEvent  object. onMouseUp  (Function) Called when a pointing device (usually a mouse) is released within the map. Receives a  PointerEvent  object. onTouchStart  (Function) Called when a  touchstart  event occurs within the map. Receives a  PointerEvent  object. onTouchMove  (Function) Called when a  touchmove  event occurs within the map. Receives a  PointerEvent  object. onTouchEnd  (Function) Called when a  touchend  event occurs within the map. Receives a  PointerEvent  object. onMouseEnter  (Function) Called when a pointing device (usually a mouse) enters a visible portion of one of the interactive layers, defined by the  interactiveLayerIds  prop. Receives a  PointerEvent  object. onMouseLeave  (Function) Called when a pointing device (usually a mouse) leaves a visible portion of one of the interactive layers, defined by the  interactiveLayerIds  prop. Receives a  PointerEvent  object. onWheel  (Function) Called when a  wheel  event occurs within the map. Receives a  PointerEvent  object. onMouseOut  (Function) Called when a point device (usually a mouse) leaves the map's canvas. Receives a  PointerEvent  object. onContextMenu  (Function) Called when the context menu is activated. Prevent default here to enable right button interaction. Default:  event => event.preventDefault() onTransitionStart  (Function) Callback that is fired when a transition is triggered. onTransitionInterrupt  (Function) Callback that is fired when an ongoing transition is interrupted by another transition. onTransitionEnd  (Function) Callback that is fired when a transition is complete. Methods Inherit the following methods from  StaticMap : getMap() queryRenderedFeatures(geometry, parameters) Source interactive-map.js","headings":[{"value":"InteractiveMap","depth":1},{"value":"Properties","depth":2},{"value":"Initialization","depth":3},{"value":"Map State","depth":3},{"value":"Render Options","depth":3},{"value":"getCursor (Function)","depth":5},{"value":"Interaction Options","depth":3},{"value":"maxZoom (Number)","depth":5},{"value":"minZoom (Number)","depth":5},{"value":"maxPitch (Number)","depth":5},{"value":"minPitch (Number)","depth":5},{"value":"scrollZoom (Boolean|Object)","depth":5},{"value":"dragPan (Boolean|Object)","depth":5},{"value":"dragRotate (Boolean)","depth":5},{"value":"doubleClickZoom (Boolean)","depth":5},{"value":"touchZoom (Boolean|Object)","depth":5},{"value":"touchRotate (Boolean|Object)","depth":5},{"value":"keyboard (Boolean|Object)","depth":5},{"value":"touchAction (String)","depth":5},{"value":"eventRecognizerOptions (Object)","depth":5},{"value":"clickRadius (Number)","depth":5},{"value":"controller (Object)","depth":5},{"value":"interactiveLayerIds (Array)","depth":5},{"value":"Transitions","depth":3},{"value":"transitionDuration (Number)","depth":5},{"value":"transitionInterpolator (Object)","depth":5},{"value":"transitionEasing (Function)","depth":5},{"value":"transitionInterruption (Number)","depth":5},{"value":"Callbacks","depth":3},{"value":"onViewportChange (Function)","depth":5},{"value":"onViewStateChange (Function)","depth":5},{"value":"onInteractionStateChange (Function)","depth":5},{"value":"onHover (Function)","depth":5},{"value":"onClick (Function)","depth":5},{"value":"onNativeClick (Function)","depth":5},{"value":"onDblClick (Function)","depth":5},{"value":"onMouseDown (Function)","depth":5},{"value":"onMouseMove (Function)","depth":5},{"value":"onMouseUp (Function)","depth":5},{"value":"onTouchStart (Function)","depth":5},{"value":"onTouchMove (Function)","depth":5},{"value":"onTouchEnd (Function)","depth":5},{"value":"onMouseEnter (Function)","depth":5},{"value":"onMouseLeave (Function)","depth":5},{"value":"onWheel (Function)","depth":5},{"value":"onMouseOut (Function)","depth":5},{"value":"onContextMenu (Function)","depth":5},{"value":"onTransitionStart (Function)","depth":5},{"value":"onTransitionInterrupt (Function)","depth":5},{"value":"onTransitionEnd (Function)","depth":5},{"value":"Methods","depth":2},{"value":"Source","depth":2}],"slug":"docs/api-reference/interactive-map","title":"InteractiveMap"},{"excerpt":"Layer This component allows apps to create a  map layer  using React. Properties The props provided to this component should be conforming to the  Goong layer specification . When props change  shallowly , the component will perform style diffing to update the layer. Avoid defining constant objects/arrays inline may help performance. Identity Properties Once a  <Layer>  is mounted, the following props should not change. If you add/remove multiple JSX layers dynamically, make sure you use React's  key prop  to give each element a stable identity. id  (String) Unique identifier of the layer. If not provided, a default id will be assigned. type  (String, required) Type of the layer. Options beforeId  (String) The ID of an existing layer to insert this layer before. If this prop is omitted, the layer will be appended to the end of the layers array. This is useful when using dynamic layers with a map style from a URL. Note that layers are added by the order that they mount. They are  NOT  reordered later if their relative positions in the JSX tree change. If dynamic reordering is desired, you should manipulate  beforeId  for consistent behavior. source  (String) source  is required by some layer types in the Goong style specification. If  <Layer>  is used as the child of a  Source  component, this prop will be overwritten by the id of the parent source. Source layer.js","headings":[{"value":"Layer","depth":1},{"value":"Properties","depth":2},{"value":"Identity Properties","depth":3},{"value":"id (String)","depth":5},{"value":"type (String, required)","depth":5},{"value":"Options","depth":3},{"value":"beforeId (String)","depth":5},{"value":"source (String)","depth":5},{"value":"Source","depth":2}],"slug":"docs/api-reference/layer","title":"Layer"},{"excerpt":"LinearInterpolator Implements the  TransitionInterpolator  interface. Designed to use with the  transitionInterpolator  prop of  InteractiveMap . Interpolates all viewport props linearly. This interpolator offers similar behavior to Goong's  easeTo  when combined with a  transitionEasing  function. You may optionally limit the transition to selected viewport props, for example  new LinearInterpolator(['pitch', 'bearing'])  animates pitch and bearing while the user is still allowed to pan and zoom. Constructor new LinearInterpolator([options]) Parameters: options  {Object} (optional) transitionProps  {Array} (optional) - list of prop names to interpolate. Default:  ['longitude', 'latitude', 'zoom', 'pitch', 'bearing'] . around  {Array} (optional) - a point to zoom/rotate the map around, as  [x, y]  in screen position. Source linear-interpolator.js","headings":[{"value":"LinearInterpolator","depth":1},{"value":"Constructor","depth":2},{"value":"Source","depth":2}],"slug":"docs/api-reference/linear-interpolator","title":"LinearInterpolator"},{"excerpt":"MapContext MapContext  allows components to interact with  InteractiveMap  or  StaticMap  via React's  context  API. It is also possible to consume  MapContext  outside the map component, if you render your own  Provider . Note that not all context fields are available if you use it this way. Fields The context value object may contain the following fields: map  (Map) - the goong-js  Map  instance viewport  (WebMercatorViewport) - the current viewport container  (HTMLDivElement) - the outer container of the map component onViewportChange  (Function) - a callback invoked when a map control requests a viewport change, with the signature  onViewportChange(viewState, interactionState, oldViewState) onViewStateChange  (Function) - an alternative callback invoked when a map control requests a viewport change, with the signature  onViewStateChange({viewState, interactionState, oldViewState}) eventManager  (EventManager) - an  EventManager  instance used to register all interactive events Source map-context.js","headings":[{"value":"MapContext","depth":1},{"value":"Fields","depth":2},{"value":"Source","depth":2}],"slug":"docs/api-reference/map-context","title":"MapContext"},{"excerpt":"MapController The easiest way to create a custom map control is to extend the default  MapController  class. Properties events  (Array) A list of additional event names that this control subscribes to. Available events:  click ,  dblclick ,  tap ,  doubletap ,  press ,  pinch ,  pinchin ,  pinchout ,  pinchstart ,  pinchmove ,  pinchend ,  pinchcancel ,  rotate ,  rotatestart ,  rotatemove ,  rotateend ,  rotatecancel ,  pan ,  panstart ,  panmove ,  panup ,  pandown ,  panleft ,  panright ,  panend ,  pancancel ,  swipe ,  swipeleft ,  swiperight ,  swipeup ,  swipedown ,  pointerdown ,  pointermove ,  pointerup ,  keydown , and  keyup . The following events are toggled on/off by InteractiveMap props:  scrollZoom  -  ['wheel'] dragPan  and  dragRotate  -  ['panstart', 'panmove', 'panend'] touchZoomRotate  -  ['pinchstart', 'pinchmove', 'pinchend'] doubleClickZoom  -  ['doubletap'] keyboard  -  ['keydown'] Event object is generated by  mjolnir.js . It always has the following properties: type  (string) -  The event type to which the event handler is subscribed, e.g.  'click'  or  'pointermove' center  (Object  {x, y} ) - The center of the event location (e.g. the centroid of a touch) relative to the viewport (basically,  clientX/Y ) offsetCenter  (Object  {x, y} ) - The center of the event location relative to the map. target  (Object) - The target of the event, as specified by the original  srcEvent srcEvent  (Object) - The original event object dispatched by the browser to the JS runtime Additionally, event objects for different event types contain a subset of the following properties: key  (number) - The keycode of the keyboard event leftButton  (boolean) - Flag indicating whether the left button is involved during the event middleButton  (boolean) - Flag indicating whether the middle button is involved during the event rightButton  (boolean) - Flag indicating whether the right button is involved during the event pointerType  (string) - A string indicating the type of input (e.g.  'mouse' ,  'touch' ,  'pointer' ) delta  (number) - The scroll magnitude/distance of a wheel event Methods handleEvent handleEvent(event) Called by the event manager to handle pointer events. This method delegate to the following methods to handle the default events: _onPanStart(event) _onPan(event) _onPanEnd(event) _onPinchStart(event) _onPinch(event) _onPinchEnd(event) _onDoubleTap(event) _onWheel(event) _onKeyDown(event) getMapState getMapState(overrides) Get a new descriptor object of the map state. If specified, props in the  overrides  object override the current map props. setOptions setOptions(options) Add/remove event listeners based on the latest  InteractiveMap  props. updateViewport updateViewport(newMapState, extraProps, interactionState) Invoke  onViewportChange  callback with a new map state. Source map-controller.js","headings":[{"value":"MapController","depth":1},{"value":"Properties","depth":2},{"value":"events (Array)","depth":5},{"value":"Methods","depth":2},{"value":"handleEvent","depth":5},{"value":"getMapState","depth":5},{"value":"setOptions","depth":5},{"value":"updateViewport","depth":5},{"value":"Source","depth":2}],"slug":"docs/api-reference/map-controller","title":"MapController"},{"excerpt":"Marker This is a React equivalent of Goong's\n Marker Control , which can\nbe used to render custom icons at specific locations on the map. Performance notes: if a large number of markers are needed, it's generally favorable to cache the  <Marker>  nodes, so that we don't rerender them when the viewport changes. Properties latitude  (Number, required) Latitude of the marker. longitude  (Number, required) Longitude of the marker. offsetLeft  (Number) default:  0 Offset of the marker from the left in pixels, negative number indicates left. offsetTop  (Number) default:  0 Offset of the marker from the top in pixels, negative number indicates up. draggable  (Boolean) default:  false Allows this marker component to be dragged around the map. (Use  onDragEnd  to capture the final position and update  longitude  and  latitude ). onDragStart  (Function) Called when a draggable marker starts being dragged. Parameters: event  - The pointer event. event.lngLat  - The geo coordinates where the drag started, as  [lng, lat] . onDrag  (Function) Continuously called while a draggable marker is being dragged. Parameters: event  - The pointer event. event.lngLat  - The geo coordinates of the drag event, as  [lng, lat] . onDragEnd  (Function) Called when a draggable marker is released at its final position. This is usually a good time to capture  event.lngLat  and update the marker's  longitude  and  latitude  props. Parameters: event  - The pointer event. event.lngLat  - The geo coordinates where the drag ended, as  [lng, lat] . className  (String) Assign a custom class name to the container of this control. captureScroll  (Boolean) default:  false Stop propagation of mouse wheel event to the map component. Can be used to stop map from zooming when this component is scrolled. captureDrag  (Boolean) default:  true Stop propagation of dragstart event to the map component. Can be used to stop map from panning when this component is dragged. captureClick  (Boolean) default:  true Stop propagation of click event to the map component. Can be used to stop map from calling the  onClick  callback when this component is clicked. captureDoubleClick  (Boolean) default:  true Stop propagation of dblclick event to the map component. Can be used to stop map from zooming when this component is double clicked. capturePointerMove  (Boolean) default:  false Stop propagation of pointermove event to the map component. Can be used to stop map from calling the  onMouseMove  or  onTouchMove  callback when this component is hovered. Styling Like its Goong counterpart, this control relies on the goong-js stylesheet to work properly. Make sure to add the stylesheet to your page. Source marker.js","headings":[{"value":"Marker","depth":1},{"value":"Properties","depth":2},{"value":"latitude (Number, required)","depth":5},{"value":"longitude (Number, required)","depth":5},{"value":"offsetLeft (Number)","depth":5},{"value":"offsetTop (Number)","depth":5},{"value":"draggable (Boolean)","depth":5},{"value":"onDragStart (Function)","depth":5},{"value":"onDrag (Function)","depth":5},{"value":"onDragEnd (Function)","depth":5},{"value":"className (String)","depth":5},{"value":"captureScroll (Boolean)","depth":5},{"value":"captureDrag (Boolean)","depth":5},{"value":"captureClick (Boolean)","depth":5},{"value":"captureDoubleClick (Boolean)","depth":5},{"value":"capturePointerMove (Boolean)","depth":5},{"value":"Styling","depth":2},{"value":"Source","depth":2}],"slug":"docs/api-reference/marker","title":"Marker"},{"excerpt":"NavigationControl This is a React equivalent of Goong's  NavigationControl ,\nwhich provides zoom buttons and a compass button. Properties onViewportChange  (Function) Callback when the user interaction with this control requests a viewport update. If provided, will be called instead of the containing  InteractiveMap 's  onViewportChange . showCompass  (Boolean) default:  true Show or hide the compass button showZoom  (Boolean) default:  true Show or hide the zoom buttons zoomInLabel  (String) default:  Zoom In Label applied to the zoom in control button. zoomOutLabel  (String) default:  Zoom Out Label applied to the zoom out control button. compassLabel  (String) default:  Reset North Label applied to the compass control button. className  (String) Assign a custom class name to the container of this control. style  (Object) default:  {position: 'absolute'} A  React style  object applied to this control. captureScroll  (Boolean) default:  false Stop propagation of mouse wheel event to the map component. Can be used to stop map from zooming when this component is scrolled. captureDrag  (Boolean) default:  true Stop propagation of dragstart event to the map component. Can be used to stop map from panning when this component is dragged. captureClick  (Boolean) default:  true Stop propagation of click event to the map component. Can be used to stop map from calling the  onClick  callback when this component is clicked. captureDoubleClick  (Boolean) default:  true Stop propagation of dblclick event to the map component. Can be used to stop map from zooming when this component is double clicked. capturePointerMove  (Boolean) default:  false Stop propagation of pointermove event to the map component. Can be used to stop map from calling the  onMouseMove  or  onTouchMove  callback when this component is hovered. Styling Like its Goong counterpart, this control relies on the goong-js stylesheet to work properly. Make sure to add the stylesheet to your page. Source navigation-control.js","headings":[{"value":"NavigationControl","depth":1},{"value":"Properties","depth":2},{"value":"onViewportChange (Function)","depth":5},{"value":"showCompass (Boolean)","depth":5},{"value":"showZoom (Boolean)","depth":5},{"value":"zoomInLabel (String)","depth":5},{"value":"zoomOutLabel (String)","depth":5},{"value":"compassLabel (String)","depth":5},{"value":"className (String)","depth":5},{"value":"style (Object)","depth":5},{"value":"captureScroll (Boolean)","depth":5},{"value":"captureDrag (Boolean)","depth":5},{"value":"captureClick (Boolean)","depth":5},{"value":"captureDoubleClick (Boolean)","depth":5},{"value":"capturePointerMove (Boolean)","depth":5},{"value":"Styling","depth":2},{"value":"Source","depth":2}],"slug":"docs/api-reference/navigation-control","title":"NavigationControl"},{"excerpt":"PointerEvent Event object passed to some of  InteractiveMap 's callback props. Members type  (String) The name of the event. point  (Array) The screen coordinates that is being clicked. lngLat  (Array) The geo coordinates that is being clicked. target  (Element) The target element of the pointer event. srcEvent  (Object) The original browser event.","headings":[{"value":"PointerEvent","depth":1},{"value":"Members","depth":2},{"value":"type (String)","depth":5},{"value":"point (Array)","depth":5},{"value":"lngLat (Array)","depth":5},{"value":"target (Element)","depth":5},{"value":"srcEvent (Object)","depth":5}],"slug":"docs/api-reference/pointer-event","title":"PointerEvent"},{"excerpt":"Popup This is a React equivalent of Goong's  Popup Control , which can be used to\nshow tooltip popups with custom HTML content at specific locations on the map. Properties latitude  (Number, required) Latitude of the anchor. longitude  (Number, required) Longitude of the anchor. altitude  (Number) default:  0 Altitude of the anchor. offsetLeft  (Number) default:  0 Offset of the anchor from the left in pixels, negative number indicates left. offsetTop  (Number) default:  0 Offset of the anchor from the top in pixels, negative number indicates up. closeButton  (Boolean) default:  true If  true , a close button will appear in the top right corner of the popup. closeOnClick  (Boolean) default:  true If  true , the popup will closed when the map is clicked. tipSize  (Number) default:  10 Size of the tip pointing to the coordinate. anchor  (String) default:  bottom A string indicating the popup's position relative to the coordinate.\nOptions are  top ,  bottom ,  left ,  right ,  top-left ,  top-right ,  bottom-left , and  bottom-right . dynamicPosition  (Boolean) default:  true If  true , the anchor will be dynamically adjusted to ensure the popup falls within the map container. sortByDepth  (Boolean) default:  false If  true , the order of the popups will be dynamically rearranged to ensure that the ones anchored closer to the camera are rendered on top. Useful when showing multiple popups in a tilted map. onClose  (Function) Callback when the user closes the popup. className  (String) Assign a custom class name to the container of this control. captureScroll  (Boolean) default:  false Stop propagation of mouse wheel event to the map component. Can be used to stop map from zooming when this component is scrolled. captureDrag  (Boolean) default:  true Stop propagation of dragstart event to the map component. Can be used to stop map from panning when this component is dragged. captureClick  (Boolean) default:  true Stop propagation of click event to the map component. Can be used to stop map from calling the  onClick  callback when this component is clicked. captureDoubleClick  (Boolean) default:  true Stop propagation of dblclick event to the map component. Can be used to stop map from zooming when this component is double clicked. capturePointerMove  (Boolean) default:  false Stop propagation of pointermove event to the map component. Can be used to stop map from calling the  onMouseMove  or  onTouchMove  callback when this component is hovered. Styling Like its Goong counterpart, this control relies on the goong-js stylesheet to work properly. Make sure to add the stylesheet to your page. Source popup.js","headings":[{"value":"Popup","depth":1},{"value":"Properties","depth":2},{"value":"latitude (Number, required)","depth":5},{"value":"longitude (Number, required)","depth":5},{"value":"altitude (Number)","depth":5},{"value":"offsetLeft (Number)","depth":5},{"value":"offsetTop (Number)","depth":5},{"value":"closeButton (Boolean)","depth":5},{"value":"closeOnClick (Boolean)","depth":5},{"value":"tipSize (Number)","depth":5},{"value":"anchor (String)","depth":5},{"value":"dynamicPosition (Boolean)","depth":5},{"value":"sortByDepth (Boolean)","depth":5},{"value":"onClose (Function)","depth":5},{"value":"className (String)","depth":5},{"value":"captureScroll (Boolean)","depth":5},{"value":"captureDrag (Boolean)","depth":5},{"value":"captureClick (Boolean)","depth":5},{"value":"captureDoubleClick (Boolean)","depth":5},{"value":"capturePointerMove (Boolean)","depth":5},{"value":"Styling","depth":2},{"value":"Source","depth":2}],"slug":"docs/api-reference/popup","title":"Popup"},{"excerpt":"ScaleControl This is a React equivalent of Goong's  ScaleControl . Properties maxWidth  (Number) default:  100 The maximum length of the scale control in pixels. unit  (String) default:  'metric' Unit of the distance, one of  'imperial' ,  'metric'  or  'nautical' . className  (String) Assign a custom class name to the container of this control. style  (Object) default:  {position: 'absolute'} A  React style  object applied to this control. captureScroll  (Boolean) default:  false Stop propagation of mouse wheel event to the map component. Can be used to stop map from zooming when this component is scrolled. captureDrag  (Boolean) default:  true Stop propagation of dragstart event to the map component. Can be used to stop map from panning when this component is dragged. captureClick  (Boolean) default:  true Stop propagation of click event to the map component. Can be used to stop map from calling the  onClick  callback when this component is clicked. captureDoubleClick  (Boolean) default:  true Stop propagation of dblclick event to the map component. Can be used to stop map from zooming when this component is double clicked. capturePointerMove  (Boolean) default:  false Stop propagation of pointermove event to the map component. Can be used to stop map from calling the  onMouseMove  or  onTouchMove  callback when this component is hovered. Styling Like its Goong counterpart, this control relies on the goong-js stylesheet to work properly. Make sure to add the stylesheet to your page. Source scale-control.js","headings":[{"value":"ScaleControl","depth":1},{"value":"Properties","depth":2},{"value":"maxWidth (Number)","depth":5},{"value":"unit (String)","depth":5},{"value":"className (String)","depth":5},{"value":"style (Object)","depth":5},{"value":"captureScroll (Boolean)","depth":5},{"value":"captureDrag (Boolean)","depth":5},{"value":"captureClick (Boolean)","depth":5},{"value":"captureDoubleClick (Boolean)","depth":5},{"value":"capturePointerMove (Boolean)","depth":5},{"value":"Styling","depth":2},{"value":"Source","depth":2}],"slug":"docs/api-reference/scale-control","title":"ScaleControl"},{"excerpt":"Source This component allows apps to create a  map source  using React. It may contain  Layer  components as children. Properties The props provided to this component should be conforming to the  Goong source specification  or  CanvasSourceOptions . Note that the map component's  mapStyle  prop defaults to  https://tiles.goong.io/assets/goong_map_web.json . To use an empty base map with your own sources, you need to override the prop, e.g.: When props change  shallowly , the component will attempt to update the source. Do not define objects/arrays inline to avoid perf hit. Once a  <Source>  is mounted, the following props should not change. If add/remove multiple JSX sources dynamically, make sure you use React's  key prop  to give each element a stable identity. id  (String) Unique identifier of the source. If not provided, a default id will be assigned. type  (String, required) Type of the source. Source source.js","headings":[{"value":"Source","depth":1},{"value":"Properties","depth":2},{"value":"id (String)","depth":5},{"value":"type (String, required)","depth":5},{"value":"Source","depth":2}],"slug":"docs/api-reference/source","title":"Source"},{"excerpt":"StaticMap The simplest  React  wrapper around  GoongJS . This is designed to be completely\nstatic, and should be used to render a map with no interactivity. For a component\nthat supports full user interactivity, see  InteractiveMap . Properties Initialization The following props are used during the creation of the Goong map. attributionControl  (Boolean) default:  true Equivalent to Goong's  attributionControl   option . If  true , shows Goong's attribution control. disableTokenWarning  (Boolean) default:  false If the provided API access token is rejected by Goong,  StaticMap  renders a warning instead of failing silently. If you know what you are doing and want to hide this warning anyways, set this prop to  true . gl  (WebGLContext) This prop is experimental. Use an existing WebGLContext instead of creating a new one. This allows multiple libraries to render into a shared buffer. Use with caution. goongApiAccessToken  (String) Goong API access token for  GoongJS . Required when using Goong vector tiles/styles\nGoong WebGL context creation option. Useful when you want to export the canvas as a PNG goongApiUrl  (String) default:  https://tiles.goong.io mapOptions  (Object) default:  {} Non-public API, see  https://github.com/visgl/react-map-gl/issues/545 An object of additional options to be passed to Goong's  Map  constructor . Options specified here\nwill take precedence over those same options if set via props. preserveDrawingBuffer  (Boolean) default:  false Equivalent to Goong's  preserveDrawingBuffer   option . If  true , the map's canvas can be exported to a PNG using  map.getCanvas().toDataURL() . preventStyleDiffing  (Boolean) default:  false If  mapStyle  is assigned an Immutable object, when the prop changes,  StaticMap  can diff between the two values and call the appropriate Goong API such as  addLayer ,  removeLayer ,  setStyle ,  setData , etc.\nThis allows apps to update data sources and layer styles efficiently. In use cases such as animation or dynamic showing/hiding layers, style diffing prevents the map from reloading and flickering when the map style changes. There are known issues with style diffing. As stopgap, use this option to prevent style diffing. reuseMaps  (Boolean) default:  false This prop is experimental. If  true , when the map component is unmounted, instead of calling  remove  on the Goong map instance, save it for later reuse. This will avoid repeatedly creating new Goong map instances if possible. Applications that frequently mount and unmount maps may try this prop to help work around a goong-js resource leak issue that can lead to a browser crash in certain situations. transformRequest  (Function) default:  null A callback run before the Map makes a request for an external URL. The callback can be used to modify the url, set headers, or set the credentials property for cross-origin requests.\nExpected to return an object with a  url  property and optionally  headers  and  credentials  properties.  Equivalent to Goong's  transformRequest   map option . Map State mapStyle  (String | Object | Immutable.Map) default:  'https://tiles.goong.io/assets/goong_map_web.json' The Goong style. A string url or a\n GoongJS style \nobject (regular JS object or Immutable.Map). Whenever the  mapStyle  prop changes, the component will attempt to update the style of the underlying Goong map. The behavior can be further customized with the  preventStyleDiffing  prop. mapStyle  is ignored when explicitly set to  null . width  (Number | String, required) The width of the map. Can be either a number in pixels, or a valid CSS string. height  (Number | String, required) The height of the map. Can be either a number in pixels, or a valid CSS string. latitude  (Number) The latitude of the center of the map, as a top level prop. Only used if  viewState  is not supplied. longitude  (Number) The longitude of the center of the map, as a top level prop. Only used if  viewState  is not supplied. zoom  (Number) The tile zoom level of the map, as a top level prop. Only used if  viewState  is not supplied. Bounded implicitly by default  minZoom  and  maxZoom  of  GoongJS bearing  (Number) default:  0 Specify the bearing of the viewport, as a top level prop. Only used if  viewState  is not supplied. pitch  (Number) default:  0 Specify the pitch of the viewport, as a top level prop. Only used if  viewState  is not supplied.. altitude  (Number) default:  1.5 Non-public API, see  https://github.com/mapbox/mapbox-gl-js/issues/1137 . Altitude of the viewport camera, relative to screen height. viewState  (Object) An object containing the view state of the map specified by the following fields: latitude  (Number) - The latitude of the center of the map. longitude  (Number) - The longitude of the center of the map. zoom  (Number) - The tile zoom level of the map. Bounded implicitly by default  minZoom  and  maxZoom  of  GoongJS . bearing  (Number) - default:  0  - The bearing of the viewport. pitch  (Number) - default:  0  - The pitch of the viewport. altitude  (Number) - default:  1.5 screen heights Note: Either the  viewState , or the  latitude ,  longitude  and  zoom  properties need to be specified. Render Options asyncRender  (Boolean) default:  false If  true , let Goong manage its own render cycle. This is the behavior prior to v4.1. If  false , force Goong canvas to redraw with DOM updates. This will make the map synchronize better with other controls during prop-driven viewport changes. style  (Object) The CSS style of the map container. visible  (Boolean) default:  true Whether the map is visible. Unmounting and re-mounting a Goong instance is known to be costly. This option offers a way to hide a map using CSS style. visibilityConstraints  (Object) An object that specifies bounds for viewport props with  min* ,  max*  keys. If the viewport props are outside of these constraints, the Goong map is automatically hidden. Default:  { minZoom: 0, maxZoom: 20, minPitch: 0, maxPitch: 60 } Callbacks onLoad  (Function) default:  () => {} A callback run when the map emits a  load  event.  Goong docs onResize  (Function) default:  () => {} A callback run when the map size has changed. onError  (Function) default:  console.error A callback run when the map emits an  error  event.  Goong docs Methods getMap Returns the Goong instance if initialized. The  Map  instance will have full access to  GoongJS's API . getMap() queryRenderedFeatures Use Goong's  queryRenderedFeatures  API to find features at point or in a bounding box. If the  parameters  argument is not specified, only queries the layers with the  interactive  property in the layer style. queryRenderedFeatures(geometry, parameters) geometry  { [Number, Number  |  [[Number, Number, [Number, Number  - Point or an array of two points defining the bounding box. Coordinates in pixels. parameters  - Query options. For more details, see  Goong API documentation . Source static-map.js","headings":[{"value":"StaticMap","depth":1},{"value":"Properties","depth":2},{"value":"Initialization","depth":3},{"value":"attributionControl (Boolean)","depth":5},{"value":"disableTokenWarning (Boolean)","depth":5},{"value":"gl (WebGLContext)","depth":5},{"value":"goongApiAccessToken (String)","depth":5},{"value":"goongApiUrl (String)","depth":5},{"value":"mapOptions (Object)","depth":5},{"value":"preserveDrawingBuffer (Boolean)","depth":5},{"value":"preventStyleDiffing (Boolean)","depth":5},{"value":"reuseMaps (Boolean)","depth":5},{"value":"transformRequest (Function)","depth":5},{"value":"Map State","depth":3},{"value":"mapStyle (String | Object | Immutable.Map)","depth":5},{"value":"width (Number | String, required)","depth":5},{"value":"height (Number | String, required)","depth":5},{"value":"latitude (Number)","depth":5},{"value":"longitude (Number)","depth":5},{"value":"zoom (Number)","depth":5},{"value":"bearing (Number)","depth":5},{"value":"pitch (Number)","depth":5},{"value":"altitude (Number)","depth":5},{"value":"viewState (Object)","depth":5},{"value":"Render Options","depth":3},{"value":"asyncRender (Boolean)","depth":5},{"value":"style (Object)","depth":5},{"value":"visible (Boolean)","depth":5},{"value":"visibilityConstraints (Object)","depth":5},{"value":"Callbacks","depth":3},{"value":"onLoad (Function)","depth":5},{"value":"onResize (Function)","depth":5},{"value":"onError (Function)","depth":5},{"value":"Methods","depth":2},{"value":"getMap","depth":5},{"value":"queryRenderedFeatures","depth":5},{"value":"Source","depth":2}],"slug":"docs/api-reference/static-map","title":"StaticMap"},{"excerpt":"SVGOverlay Allows applications to overlay data on top of maps using a SVG container. Properties redraw  (Function) Called every time the map updates. Parameters: width  (Number) - width of the viewport height  (Number) - height of the viewport project  (Function) - get screen position  [x, y]  from geo coordinates  [lng, lat] unproject  (Function) - get geo coordinates  [lng, lat]  from screen position  [x, y] style  (Object) Additional css styles of the  svg  container. captureScroll  (Boolean) default:  false Stop propagation of mouse wheel event to the map component. Can be used to stop map from zooming when this component is scrolled. captureDrag  (Boolean) default:  false Stop propagation of dragstart event to the map component. Can be used to stop map from panning when this component is dragged. captureClick  (Boolean) default:  false Stop propagation of click event to the map component. Can be used to stop map from calling the  onClick  callback when this component is clicked. captureDoubleClick  (Boolean) default:  false Stop propagation of dblclick event to the map component. Can be used to stop map from zooming when this component is double clicked. capturePointerMove  (Boolean) default:  false Stop propagation of pointermove event to the map component. Can be used to stop map from calling the  onMouseMove  or  onTouchMove  callback when this component is hovered. Source svg-overlay.js","headings":[{"value":"SVGOverlay","depth":1},{"value":"Properties","depth":2},{"value":"redraw (Function)","depth":5},{"value":"style (Object)","depth":3},{"value":"captureScroll (Boolean)","depth":5},{"value":"captureDrag (Boolean)","depth":5},{"value":"captureClick (Boolean)","depth":5},{"value":"captureDoubleClick (Boolean)","depth":5},{"value":"capturePointerMove (Boolean)","depth":5},{"value":"Source","depth":2}],"slug":"docs/api-reference/svg-overlay","title":"SVGOverlay"},{"excerpt":"WebMercatorViewport The  WebMercatorViewport  class takes map camera states ( latitude ,  longitude ,  zoom ,  pitch ,  bearing  etc.),\nand performs projections between world and screen coordinates. Constructor Parameter Type Default Description width number 1 Width of viewport height number 1 Height of viewport latitude number 0 Latitude of viewport center longitude number 0 Longitude of viewport center zoom number 11 Map zoom (scale is calculated as  2^zoom ) pitch number 0 The pitch (tilt) of the map from the screen, in degrees (0 is straight down) bearing number 0 The bearing (rotation) of the map from north, in degrees counter-clockwise (0 means north is up) fovy number see below Field of view of camera in degrees altitude number see below Altitude of camera in screen units position number[] null Offset of the camera, in meters Remarks: If either  altitude  or  fovy  is not provided, the missing value is computed from the other using  altitudeToFovy() / fovyToAltitude() . Altitude has a default value that matches assumptions in mapbox-gl. It is only used if both  altitude  and  fovy  are not supplied. Field of view is independent from altitude, provide  altitudeToFovy(1.5)  (default value) to match assumptions in mapbox-gl width  and  height  are forced to 1 if supplied as 0, to avoid\ndivision by zero. This is intended to reduce the burden of apps to\nto check values before instantiating a  Viewport . When using Mercator projection, per cartographic tradition, longitudes and\nlatitudes are specified as degrees. Methods project(lngLatZ, options) Projects latitude and longitude to pixel coordinates on screen. Parameter Type Default Description lngLatZ Array (required) map coordinates,  [lng, lat]  or  [lng, lat, Z]  where  Z  is elevation in meters options Object {} named options options.topLeft Boolean true If  true  projected coords are top left, otherwise bottom left Returns:  [x, y]  or  [x, y, z]  in pixels coordinates.  z  is pixel depth. If input is  [lng, lat] : returns  [x, y] . If input is  [lng, lat, Z] : returns  [x, y, z] . Remarks: By default, returns top-left coordinates suitable for canvas/SVG type\nrendering. unproject(xyz, options) Unproject pixel coordinates on screen to longitude and latitude on map. Parameter Type Default Description xyz Array (required) pixel coordinates,  [x, y]  or  [x, y, z]  where  z  is pixel depth options Object {} named options options.topLeft Boolean true If  true  projected coords are top left, otherwise bottom left options.targetZ number 0 If pixel depth  z  is not specified in  xyz , use  options.targetZ  as the desired elevation Returns:  [lng, lat]  or  [longitude, lat, Z]  in map coordinates.  Z  is elevation in meters. If input is  [x, y]  without specifying  options.targetZ : returns  [lng, lat] . If input is  [x, y]  with  options.targetZ : returns  [lng, lat, targetZ] . If input is  [x, y, z] : returns  [lng, lat, Z] . projectFlat(lngLat, scale) Project longitude and latitude onto Web Mercator coordinates. Parameter Type Default Description lngLat Array (required) map coordinates,  [lng, lat] scale number this.scale Web Mercator scale Returns: [x, y] , representing Web Mercator coordinates. unprojectFlat(xy, scale) Unprojects a Web Mercator coordinate to longitude and latitude. Parameter Type Default Description xy Array (required) Web Mercator coordinates,  [x, y] scale number this.scale Web Mercator scale Returns: [longitude, latitude] getBounds(options) Get the axis-aligned bounding box of the current visible area. options.z  (number, optional) - To calculate a bounding volume for fetching 3D data, this option can be used to get the bounding box at a specific elevation. Default  0 . Returns: [[lon, lat], [lon, lat]]  as the south west and north east corners of the smallest orthogonal bounds that encompasses the visible region. getBoundingRegion(options) Get the vertices of the current visible region. options.z  (number, optional) - To calculate a bounding volume for fetching 3D data, this option can be used to get the bounding region at a specific elevation. Default  0 . Returns: An array of 4 corners in  [longitude, latitude, altitude]  that define the visible region. fitBounds(bounds, options: object) Get a new flat viewport that fits around the given bounding box. bounds  ([ number,number , number,number ]) - an array of two opposite corners of\nthe bounding box. Each corner is specified in  [lon, lat] . options.padding  (number|{top:number, bottom: number, left: number, right: number}, optional) - The amount of\npadding in pixels to add to the given bounds from the edge of the viewport. If padding is set as object, all parameters are\nrequired. options.offset  ( number,number , optional) - The center of the given bounds relative to the viewport's center,  [x, y]  measured in pixels. opts.minExtent  (number, optional) - If supplied, the bounds used to calculate the new map settings will be expanded if the delta width or height of the supplied  bounds  is smaller than this value. opts.maxZoom = 24  (number, optional) - The returned zoom value will be capped to this value. Avoids returning infinite  zoom  when the supplied  bounds  have zero width or height deltas. Returns: A new  WebMercatorViewport  instance getMapCenterByLngLatPosition(options: object): [number, number] Get the map center that place a given  lng, lat  coordinate at screen point  x, y . Parameters: options.lngLat  (Array, required) -  lng,lat  coordinates of a location on the sphere. options.pos  (Array, required) -  x,y  coordinates of a pixel on screen. Returns: [longitude, latitude]  as the new map center","headings":[{"value":"WebMercatorViewport","depth":1},{"value":"Constructor","depth":2},{"value":"Methods","depth":2},{"value":"project(lngLatZ, options)","depth":5},{"value":"unproject(xyz, options)","depth":5},{"value":"projectFlat(lngLat, scale)","depth":5},{"value":"unprojectFlat(xy, scale)","depth":5},{"value":"getBounds(options)","depth":5},{"value":"getBoundingRegion(options)","depth":5},{"value":"fitBounds(bounds, options: object)","depth":5},{"value":"getMapCenterByLngLatPosition(options: object): [number, number]","depth":5}],"slug":"docs/api-reference/web-mercator-viewport","title":"WebMercatorViewport"},{"excerpt":"Contributing to goong-map-react Thanks for taking the time to contribute! PRs and bug reports are welcome, and we are actively looking for new maintainers. Setting Up Dev Environment The  main  branch is the active development branch. Building  @goongmaps/goong-map-react  locally from the source requires node.js  >=8 .\nWe use  yarn  to manage the dependencies. Test: Test in Node: Test in browser (can use Chrome dev tools for debugging): Pull Requests Any intended change to the code base must open a  pull request  and be approved.  PR Checklist Tests npm run test  must be successful. New code should be covered by unit tests whenever possible. Documentation If public APIs are added/modified, update component documentation in  docs/api-reference . Breaking changes and deprecations must be added to  docs/upgrade-guide.md . Noteworthy new features should be added to  docs/whats-new.md . Description on GitHub Link to relevant issue. Label with a milestone (latest release or vNext). If public APIs are added/modified, describe the intended behavior. If visual/interaction is affected, consider attaching a screenshot/GIF. Code of Conduct Please be mindful of and adhere to the Linux Foundation's  Code of Conduct  when contributing to goong-map-react.","headings":[{"value":"Contributing to goong-map-react","depth":1},{"value":"Setting Up Dev Environment","depth":2},{"value":"Pull Requests","depth":2},{"value":"PR Checklist","depth":3},{"value":"Code of Conduct","depth":2}],"slug":"docs/contributing","title":"Contributing to goong-map-react"},{"excerpt":"Adding Custom Data Native Mapbox Layers You can inject data and mapbox native layers using the  Source  and  Layer  components: For details about data sources and layer configuration, check out the  Goong style specification . For dynamically updating data sources and layers, check out the  GeoJSON  and  GeoJSON animation  examples. Overlays goong-map-react  provides a basic overlay API that enables applications to overlay data on top of maps.\nThey are great for creating light-weight custom drawings. Example Built-in Overlays SVGOverlay HTMLOverlay CanvasOverlay Example Overlays There are a couple of  additional overlays  in the examples folder that can be copied into applications  ScatterplotOverlay ,  ChoroplethOverlay . Third-party overlays are also available. For example, the  heatmap-overlay  module uses  webgl-heatmap  to create geographic heatmaps. Other vis.gl Libraries For more feature rich and performant data visualization overlay use cases, you may consider using other visualization libraries. react-map-gl is part of the  vis.gl  ecosystem, a suite of high-performance data visualization tools for the Web. deck.gl  - WebGL-powered framework for the visualization of large datasets. loaders.gl  - loaders for file formats focused on visualization of big data, including point clouds, 3D geometries, images, geospatial formats as well as tabular data. nebula.gl  - 3D-enabled GeoJSON editing based on deck.gl and React.","headings":[{"value":"Adding Custom Data","depth":1},{"value":"Native Mapbox Layers","depth":2},{"value":"Overlays","depth":2},{"value":"Example","depth":3},{"value":"Built-in Overlays","depth":3},{"value":"Example Overlays","depth":3},{"value":"Other vis.gl Libraries","depth":2}],"slug":"docs/get-started/adding-custom-data","title":"Adding Custom Data"},{"excerpt":"FAQ Enable Right-to-Left Language Support This is the same as  import {setRTLTextPlugin} from '@goongmaps/goong-map-react'  in the browser, but will not crash in node. The export mainly offers a convenience when using server-side rendering. To use this API, consult Mapbox's  setRTLTextPlugin  documentation. Where is fitBounds? You can use the  WebMercatorViewport  utility to find the target viewport that fits around a longitude-latitude bounding box: Documentation of WebMercatorViewport I called flyTo/panTo and all controls went out of sync You cannot manipulate the map camera via  getMap()  and the native mapbox-gl API. To conform to the reactive programming paradigm, all camera changes should be driven by prop changes on the React component. Circumventing this will break the binding between React components and the underlying map instance. Instead, use the  InteractiveMap 's transition props. See  viewport transition  for examples. mapbox-gl-draw does not work with react-map-gl Unfortunately, react-map-gl implements its own interative logic and disables the native event handling of mapbox-gl. Short explanation: mapbox-gl is not designed to support React. Long explanation: When using react-map-gl, we have two asynchronous rendering loops, React and Mapbox. Mapbox's  move  events are only fired after the camera changes and there is no way to control how and when the map rerenders. If we update React states upon the  move  events, all React controls/overlays may only get updated one animation frame after the map rerender. You can find discussions  here  and  here . Because of this, any mapbox-gl control that listens to the native map events will not work. An equivelant to mapbox-gl-draw is  react-map-gl-draw . You can find an example  here .","headings":[{"value":"FAQ","depth":1},{"value":"Enable Right-to-Left Language Support","depth":2},{"value":"Where is fitBounds?","depth":2},{"value":"I called flyTo/panTo and all controls went out of sync","depth":2},{"value":"mapbox-gl-draw does not work with react-map-gl","depth":2}],"slug":"docs/get-started/faq","title":"FAQ"},{"excerpt":"Get Started Installation Using  @goongmaps/goong-map-react  requires  node >= v4  and  react >= 16.3 . Example See full project setup in  get-started examples Styling The current mapbox-gl release requires its stylesheet be included at all times. The marker, popup and navigation components in react-map-gl also need the stylesheet to work properly. You may add the stylesheet to the head of your page: Find out your mapbox version by running  yarn list mapbox-gl  or  npm ls mapbox-gl . Or embed it in your app by using -  browserify-css \nwith Browserify or -  css-loader  with Webpack: Using with Browserify, Webpack, and other JavaScript Bundlers browserify  - react-map-gl is extensively tested with  browserify  and works without configuration. webpack  - Most of the provided react-map-gl examples use webpack. Look at the  get started examples  folder for minimalist templates. create-react-app  - react-map-gl is compatible with  create-react-app . create-react-app-typescript  - react-map-gl is compatible with  create-react-app-typescript . You can see an example  here . There's many other ready-to-run  examples  you can take a look at if you need more inspiration.","headings":[{"value":"Get Started","depth":1},{"value":"Installation","depth":2},{"value":"Example","depth":2},{"value":"Styling","depth":2},{"value":"Using with Browserify, Webpack, and other JavaScript Bundlers","depth":2}],"slug":"docs/get-started/get-started","title":"Get Started"},{"excerpt":"State Management InteractiveMap  is designed to be a stateless component. Its appearance is entirely controlled by the properties that are passed in from its parent. In this architecture, transition works the same way as interaction: the component shall notify the application of \"user intent\" by calling the  onViewportChange  callback, but ultimately the application needs to decide what to do with it. The most simple handling of this intent is to save it and pass it back to the component: User interaction and transition will not work without a valid  onViewportChange  handler. The advantage of this practice is that it ensures a single source of truth regarding the viewport state (in the example above, saved in the  state  of the container component). When you use this viewport state to direct the rendering of other components, it is guaranteed that they will always be synced with the map. You may apply additional constraints to the viewport: Or manipulate the viewport outside of the ReactMap component: Using with Redux If you're using redux, it is very easy to hook this component up to store state in the redux state tree.\nThe simplest way is to take all properties passed to the  onViewportChange  function property and add them\ndirectly into the store. This state can then be passed back to the  <ReactMapGL>  component without any transformation.","headings":[{"value":"State Management","depth":1},{"value":"Using with Redux","depth":2}],"slug":"docs/get-started/state-management","title":"State Management"}]}},"staticQueryHashes":["484347790"]}